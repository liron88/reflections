	git remote - see all current GitHub repositories (their local name are
	remotes).
	git remote -v - some added information (from where is fetch done and to
	where push is done).
	git remote add origin [some URL of repository] - adds a repository in the
	specified [URL]. This [URL] will be referred to as "origin". You can rename it
	to whatever you like.
	git push [origin] [master] - pushes branch [master] into remote [origin].

When would you want to use a remote repository rather than keeping all your work
local?

    One reason is for backup. The second reason is the ability to collaborate with
    others on the same project. The third reason is for sharing the code with
    others, so they can view or modify it independently.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    Other contributors might commit their changes while I'm working on my
	changes on my computer. I don't want the code to change *while* I'm working
	on it. For example, let's say someone is changing the exact same function
	as I do. Only later would I like to compare our versions and pull his/her
	version if it's better.	

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Branches are different versions of the same program which exist in parallel.
	Clones are copies of the same repository. One can clone a repository from
	GitHub to his local storage, or from his local storage to somewhere else
	in his local storage.
	Forks are generally the same as clones, except that a fork is a clone of
	one repository from GitHub to another repository *on GitHub*.

	git fetch branch-name
	
	git pull master =	git fetch master
						git merge master origin/master
	
What is the benefit of having a copy of the last known state of the remote
stored locally?

    The ability to work offline and merge changes at your free time where no
	internet connection is present.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    I would have to send the files back and forth through email or IM to the
	other contributor and mention there what I like and what's needs to be
	changed. This is much more annoying and harder.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    It is less comfortable than pushing and pulling directly from master,
	but it does add the powerful option of collaboration. If I changed the
	master branch directly, other contributors will not be able to review the
	changed that I've before they got incorporated into the master branch.
	That way, they cannot add their own observations and ideas.
