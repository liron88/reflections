What happens when you initialize a repository? Why do you need to do it?

	Use git init to initialize a new repository.
    A repository is initialized. That means there are no commits yet,
	but only untracked files.
	There's a need to do it because later we'll use that repository to
	commit dependent files at once.
	
How is the staging area different from the working directory and the 
repository? What value do you think it offers?

	The staging area is a intermediate step used when preparing to commit.
	Only those files that were added to the staging area from the working
	directory will commit to the repository. It is different from the
	working directory because it "knows" which files are to be committed (which
	is not always all the files). It is different from the repository by the 
	fact that it does contain information about the files in the working
	directory (e.g. untracked files).
	It offers the value of freedom the chose which files from the working
	directory will be committed.
	
command						comparing commits that are found in
------------------------	-----------------------------------
git diff					working directory	staging area
git diff --staged			staging area		commit1
git diff commit1 commit2	commit1				commit2

How can you use the staging area to make sure you have one commit per logical
change?

	Using the command git status, one can see which files are in the staging
	area and which files are untracked (files that are found only in the
	working directory). Only those files that are in the staging area will
	be committed. To commit per logical change, insert only the relevant
	files for the logical change to the staging area (using the command
	git add).
	
git branch shows all the branches that were created.
a star next to a branch's name indicates that this is the current branch.
git branch [branch name] creates a new branch called [branch name]
git checkout [branch name] switches to a branch named [branch name]

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	Testing out a new feature which may or may not make it to the final
	version of the project. A branch helps developing that feature completely
	on its own, and only when it's ready, merge it into the final project.
	
How do the diagrams help you visualize the branch structure?

	It helps too visualize what commits are found on which brances,
	and which commits will be discarded if returning to an existing branch
	(and the current commit isn't found on any branch).
	
	git checkout -b [branch name]
	equals
	git branch [branch name]
	git checkout [branch name]
	
	this is useful when creating a new commit that is not found on any branch
	just yet.
	
	git show [commit] - diffs [commit] and its parent (without knowing the
	parent id).
	git branch -d [branch name] - deletes branch [branch name]. d means delete.
	If this is done after [branch name] was merged into some other merge (say
	master branch), the commits in [branch name] will be accessible through
	git log in the master branch.
	
	git merge --abort - aborts merging and restore the files to the state
	before the merge.
	
	git log --graph --oneline - shows a graph of the branches.
	
What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	Merging two branches together incorporates the changes (including additions
	and deletions) from both branches.
	Representing it in the diagram is only for convenience making it easy to
	follow on where (i.e. which commit) the branches were split and where they
	had merged.
	
What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

	Git's automatic merging is fast. The ability to work on small changes
	separately and merge them into the final version "when it's ready" is a
	powerful tool. The cons is that sometimes there are conflicts which
	need to be resolved manually, as Git can't decide by itself.
	This requires some time to decide on the best way to merge and keep
	the requested changes only. Although Git helps tracking where are
	the changes that are needed further examination by inserting lines with
	instructions.
	Always doing merges manually is only good for small applications. Where
	there is a huge chunk of code, working on a feature might render the
	program useless for a while (instead of making it a branch and merging
	later). Moreover, this can insert bug/s. For example, if you wish to show
	a demo of your program, you won't be able to do it in that case, unless
	you manually remove all your changes of save a different unrelated copy
	of your program in the first place.
